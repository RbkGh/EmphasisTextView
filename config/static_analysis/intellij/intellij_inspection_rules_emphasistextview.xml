<?xml version="1.0" encoding="UTF-8"?>
<inspections version="1.0">
    <option name="myName" value="intellij_inspection_rules_emphasis"/>
    <option name="myLocal" value="true"/>

    <!--This disables lint api warnings in tests.-->
    <inspection_tool class="AndroidLintInlinedApi" enabled="true" level="WARNING" enabled_by_default="false">
        <scope name="Production" level="WARNING" enabled="true"/>
    </inspection_tool>

    <!--Sparse array is good to use, but it's up to the developer as for small maps it doesn't make any difference.-->
    <inspection_tool class="AndroidLintUseSparseArrays" enabled="false" level="WARNING" enabled_by_default="false"/>

    <!--Constant conditions & exceptions is not applied in tests.-->
    <inspection_tool class="ConstantConditions" enabled="true" level="WARNING" enabled_by_default="false">
        <scope name="Production" level="WARNING" enabled="true">
            <option name="SUGGEST_NULLABLE_ANNOTATIONS" value="true"/>
            <option name="DONT_REPORT_TRUE_ASSERT_STATEMENTS" value="false"/>
            <option name="TREAT_UNKNOWN_MEMBERS_AS_NULLABLE" value="true"/>
        </scope>
        <option name="SUGGEST_NULLABLE_ANNOTATIONS" value="false"/>
        <option name="DONT_REPORT_TRUE_ASSERT_STATEMENTS" value="false"/>
    </inspection_tool>

    <!--Ignore deprecation warnings in tests-->
    <inspection_tool class="Deprecation" enabled="true" level="WARNING" enabled_by_default="false">
        <scope name="Production" level="WARNING" enabled="true"/>
    </inspection_tool>

    <!--This disables the warning about duplicates in tests.-->
    <inspection_tool class="Duplicates" enabled="true" level="WARNING" enabled_by_default="false">
        <scope name="Production" level="WARNING" enabled="true"/>
    </inspection_tool>

    <!--This disables the warning about linking a javadoc back to self , i.e. the same Class that the javadoc exists in.-->
    <inspection_tool class="JavaDoc" enabled="true" level="WARNING" enabled_by_default="true">
        <option name="TOP_LEVEL_CLASS_OPTIONS">
            <value>
                <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none"/>
                <option name="REQUIRED_TAGS" value=""/>
            </value>
        </option>
        <option name="INNER_CLASS_OPTIONS">
            <value>
                <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none"/>
                <option name="REQUIRED_TAGS" value=""/>
            </value>
        </option>
        <option name="METHOD_OPTIONS">
            <value>
                <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none"/>
                <option name="REQUIRED_TAGS" value="@return@param@throws or @exception"/>
            </value>
        </option>
        <option name="FIELD_OPTIONS">
            <value>
                <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none"/>
                <option name="REQUIRED_TAGS" value=""/>
            </value>
        </option>
        <option name="IGNORE_DEPRECATED" value="false"/>
        <option name="IGNORE_JAVADOC_PERIOD" value="true"/>
        <option name="IGNORE_DUPLICATED_THROWS" value="false"/>
        <option name="IGNORE_POINT_TO_ITSELF" value="true"/>
        <option name="myAdditionalJavadocTags" value=""/>
    </inspection_tool>

    <!--This enables a warning when we initialize a logger with a wrong class.-->
    <inspection_tool class="LoggerInitializedWithForeignClass" enabled="true" level="WARNING" enabled_by_default="true">
        <option name="loggerClassName" value="org.apache.log4j.Logger,org.slf4j.LoggerFactory,org.apache.commons.logging.LogFactory,java.util.logging.Logger"/>
        <option name="loggerFactoryMethodName" value="getLogger,getLogger,getLog,getLogger"/>
    </inspection_tool>

    <!--This disables a warning for collections that are either queried and not updated, or updated and not queried.-->
    <inspection_tool class="MismatchedCollectionQueryUpdate" enabled="false" level="WARNING" enabled_by_default="false">
        <option name="queryNames">
            <value/>
        </option>
        <option name="updateNames">
            <value/>
        </option>
    </inspection_tool>

    <!--Enable the "missing @Override annotation" warning.-->
    <inspection_tool class="MissingOverrideAnnotation" enabled="true" level="WARNING" enabled_by_default="true">
        <option name="ignoreObjectMethods" value="false"/>
        <option name="ignoreAnonymousClassMethods" value="false"/>
    </inspection_tool>

    <!--@NotNull/@Nullable problems rule is not applied in tests.-->
    <inspection_tool class="NullableProblems" enabled="true" level="WARNING" enabled_by_default="false">
        <scope name="Production" level="WARNING" enabled="true">
            <option name="REPORT_NULLABLE_METHOD_OVERRIDES_NOTNULL" value="true"/>
            <option name="REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL" value="true"/>
            <option name="REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE" value="true"/>
            <option name="REPORT_NOT_ANNOTATED_PARAMETER_OVERRIDES_NOTNULL" value="true"/>
            <option name="REPORT_NOT_ANNOTATED_GETTER" value="true"/>
            <option name="REPORT_NOTNULL_PARAMETERS_OVERRIDES_NOT_ANNOTATED" value="true"/>
            <option name="REPORT_NOT_ANNOTATED_SETTER_PARAMETER" value="true"/>
            <option name="REPORT_ANNOTATION_NOT_PROPAGATED_TO_OVERRIDERS" value="true"/>
            <option name="REPORT_NULLS_PASSED_TO_NON_ANNOTATED_METHOD" value="true"/>
        </scope>
        <option name="REPORT_NULLABLE_METHOD_OVERRIDES_NOTNULL" value="true"/>
        <option name="REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL" value="true"/>
        <option name="REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE" value="true"/>
        <option name="REPORT_NOT_ANNOTATED_PARAMETER_OVERRIDES_NOTNULL" value="true"/>
        <option name="REPORT_NOT_ANNOTATED_GETTER" value="true"/>
        <option name="REPORT_NOT_ANNOTATED_SETTER_PARAMETER" value="true"/>
        <option name="REPORT_ANNOTATION_NOT_PROPAGATED_TO_OVERRIDERS" value="true"/>
        <option name="REPORT_NULLS_PASSED_TO_NON_ANNOTATED_METHOD" value="true"/>
    </inspection_tool>

    <!--Disable rule that asks to simplify "if" statements by merging them with "&&" and "||".-->
    <inspection_tool class="SimplifiableIfStatement" enabled="false" level="WARNING" enabled_by_default="false"/>

    <!--Disable rule that asks to replace string buffers with string concatenation ("+").-->
    <inspection_tool class="StringBufferReplaceableByString" enabled="false" level="WARNING" enabled_by_default="false"/>

    <!--Disable unchecked cast warning in tests.-->
    <inspection_tool class="UNCHECKED_WARNING" enabled="true" level="WARNING" enabled_by_default="false">
        <scope name="Production" level="WARNING" enabled="true"/>
    </inspection_tool>

    <!--Disable warning that prompts to avoid unnecessary extra local variables.-->
    <inspection_tool class="UnnecessaryLocalVariable" enabled="true" level="WARNING" enabled_by_default="true">
        <option name="m_ignoreImmediatelyReturnedVariables" value="true"/>
        <option name="m_ignoreAnnotatedVariables" value="false"/>
        <option name="m_ignoreAnnotatedVariablesNew" value="false"/>
    </inspection_tool>

    <!--Disable warning that complains about redundant initializers (like instantiating booleans to false).-->
    <inspection_tool class="UnusedAssignment" enabled="true" level="WARNING" enabled_by_default="true">
        <option name="REPORT_PREFIX_EXPRESSIONS" value="false"/>
        <option name="REPORT_POSTFIX_EXPRESSIONS" value="true"/>
        <option name="REPORT_REDUNDANT_INITIALIZER" value="false"/>
    </inspection_tool>

    <!--Do not suggest package local as access modifier.-->
    <inspection_tool class="WeakerAccess" enabled="true" level="WARNING" enabled_by_default="true">
        <option name="SUGGEST_PACKAGE_LOCAL_FOR_MEMBERS" value="false"/>
        <option name="SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES" value="true"/>
        <option name="SUGGEST_PRIVATE_FOR_INNERS" value="false"/>
    </inspection_tool>
</inspections>
